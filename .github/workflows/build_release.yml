name: Build Releases
on:
  push:
    branches:
      - master
    tags:
      - v*
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: read
  issues: read
  repository-projects: read

env:
  CARGO_TERM_COLOR: always

jobs:
  detect-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.detect.outputs.tag }}
      should_release: ${{ steps.detect.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect release tag
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Check if latest commit has a tag
            LATEST_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
            if [ -n "$LATEST_TAG" ]; then
              echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Create GitHub Release
        if: steps.detect.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          TAG="${{ steps.detect.outputs.tag }}"
          echo "Working with tag: $TAG"
          
          # Configure Git identity for tag creation
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Check if tag exists
          if ! git tag -l | grep -q "^$TAG$"; then
            echo "Warning: Tag $TAG does not exist in repository"
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "Creating tag $TAG for manual workflow dispatch"
              git tag -a "$TAG" -m "Release $TAG"
              git push origin "$TAG"
            else
              echo "Error: Tag $TAG not found and not a manual dispatch"
              exit 1
            fi
          fi
          
          # Check if release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists, skipping creation"
          else
            echo "Creating release $TAG"
            if gh release create "$TAG" \
              --title "$TAG Release" \
              --notes "CyborgAI CLI release $TAG with cross-platform binaries" \
              --draft; then
              echo "✅ Release created successfully"
            else
              echo "⚠️ Failed to create release, but continuing with build process"
              echo "The softprops/action-gh-release action will create the release when uploading binaries"
              echo "This is normal if repository permissions don't allow release creation via gh CLI"
              exit 0
            fi
          fi
  build-release-cross:
    needs: detect-release
    if: needs.detect-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main

      - name: Install LLVM and Clang
        run: sudo apt install -y clang

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git for private repositories
        run: |
          # Configure Git authentication
          git config --global url."https://${{ secrets.GIT_CREDENTIALS }}@github.com".insteadOf https://github.com
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Test Git authentication
          echo "Testing Git authentication..."
          git ls-remote https://github.com/cyborg-ai-git/evo_core_app_cli.git HEAD || echo "Warning: Could not access private repository"

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install nightly-2025-06-20 --component rustc,rust-std,cargo,clippy,rustfmt
          rustup default nightly-2025-06-20
          rustup override set nightly-2025-06-20

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build ${{ matrix.platform.target }}
        timeout-minutes: 120
        run: |
          compile_target=${{ matrix.platform.target }}

          compile_features="-f full"

          if [[ "$compile_target" == *"-windows-"* ]]; then
            compile_features="$compile_features -f winservice"
          fi

          # Always use nightly since we're using nightly-2025-06-20
          compile_nightly="-n"

          cd build
          ./build-release -t ${{ matrix.platform.target }} $compile_features $compile_nightly

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/release/*
          prerelease: ${{ contains(needs.detect-release.outputs.tag, '-') }}
          tag_name: ${{ needs.detect-release.outputs.tag }}
          draft: false
          fail_on_unmatched_files: true
          generate_release_notes: true

  build-release-unix:
    needs: detect-release
    if: needs.detect-release.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    env:
      BUILD_EXTRA_FEATURES: "full"
      RUST_BACKTRACE: full
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest]
        os: [macos-latest]
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git for private repositories
        run: |
          # Configure Git authentication
          git config --global url."https://${{ secrets.GIT_CREDENTIALS }}@github.com".insteadOf https://github.com
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Test Git authentication
          echo "Testing Git authentication..."
          git ls-remote https://github.com/cyborg-ai-git/evo_core_app_cli.git HEAD || echo "Warning: Could not access private repository"

      - name: Install GNU tar
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          # echo "::add-path::/usr/local/opt/gnu-tar/libexec/gnubin"
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install nightly-2025-06-20 --component rustc,rust-std,cargo,clippy,rustfmt
          rustup default nightly-2025-06-20
          rustup override set nightly-2025-06-20
          rustup target add --toolchain nightly-2025-06-20 ${{ matrix.target }}

      - name: Build release
        shell: bash
        run: |
          ./build/build-host-release -t ${{ matrix.target }}

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/release/*
          prerelease: ${{ contains(needs.detect-release.outputs.tag, '-') }}
          tag_name: ${{ needs.detect-release.outputs.tag }}
          draft: false
          fail_on_unmatched_files: true
          generate_release_notes: true

  build-release-windows:
    needs: detect-release
    if: needs.detect-release.outputs.should_release == 'true'
    runs-on: windows-latest
    env:
      RUSTFLAGS: "-C target-feature=+crt-static"
      RUST_BACKTRACE: full
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: ilammy/setup-nasm@v1

      - name: Configure Git for private repositories
        run: |
          # Configure Git authentication
          git config --global url."https://${{ secrets.GIT_CREDENTIALS }}@github.com".insteadOf https://github.com
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Test Git authentication
          Write-Host "Testing Git authentication..."
          try { git ls-remote https://github.com/cyborg-ai-git/evo_core_app_cli.git HEAD } catch { Write-Host "Warning: Could not access private repository" }
        shell: pwsh

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install nightly-2025-06-20 --component rustc,rust-std,cargo,clippy,rustfmt
          rustup default nightly-2025-06-20
          rustup override set nightly-2025-06-20

      - name: Build release
        run: |
          pwsh ./build/build-host-release.ps1 "full winservice"

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/release/*
          prerelease: ${{ contains(needs.detect-release.outputs.tag, '-') }}
          tag_name: ${{ needs.detect-release.outputs.tag }}
          draft: false
          fail_on_unmatched_files: true
          generate_release_notes: true